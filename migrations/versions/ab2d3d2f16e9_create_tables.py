"""create tables

Revision ID: ab2d3d2f16e9
Revises: 
Create Date: 2023-10-24 23:55:42.022953

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ab2d3d2f16e9'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.UUID(), nullable=False, comment='UUID'),
    sa.Column('name', sa.String(length=50), nullable=False, comment='Name of the category'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=20), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False, comment='First name of the user'),
    sa.Column('sur_name', sa.String(length=50), nullable=False, comment='Surname of the user'),
    sa.Column('last_name', sa.String(length=50), nullable=False, comment='Last name of the user'),
    sa.Column('phone', sa.String(length=11), nullable=False, comment='Phone number'),
    sa.Column('email', sa.String(length=50), nullable=False, comment='Email of the user'),
    sa.Column('avatar', sa.String(length=255), nullable=False, comment='Avatar of the user'),
    sa.Column('organization_name', sa.String(length=50), nullable=False, comment='Organization name of the entity user'),
    sa.Column('bin', sa.String(length=12), nullable=False, comment='BIN of the entity user'),
    sa.Column('address', sa.String(length=20), nullable=False, comment='Address of the user'),
    sa.Column('city', sa.String(length=50), nullable=False, comment='City of the user'),
    sa.Column('country', sa.String(length=50), nullable=False, comment='Country of the user'),
    sa.Column('user_type', sa.String(length=50), nullable=False, comment='User type either Individual or Entity'),
    sa.Column('password', sa.String(length=255), nullable=False, comment='Password of the Entity'),
    sa.Column('salt', sa.String(length=5), nullable=False, comment='Encryption salt'),
    sa.Column('role', sa.String(length=255), nullable=False, comment='Role of the Entity'),
    sa.Column('field', sa.String(length=255), nullable=False, comment="Field of the Entity's role"),
    sa.Column('website', sa.String(length=255), nullable=False, comment="URL of the Entity's website"),
    sa.Column('description', sa.String(length=255), nullable=False, comment="Description of the Entity's experience"),
    sa.Column('is_superuser', sa.Boolean(), nullable=False, comment='Superuser privilege'),
    sa.Column('active', sa.Integer(), nullable=False, comment='User account status'),
    sa.Column('online', sa.Integer(), nullable=False, comment='User account status'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='When user account was created'),
    sa.Column('last_login_time', sa.DateTime(), nullable=False, comment='Last login of the user'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('phone')
    )
    op.create_index(op.f('ix_users_bin'), 'users', ['bin'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('constructionsites',
    sa.Column('id', sa.UUID(), nullable=False, comment='UUID'),
    sa.Column('name', sa.String(length=50), nullable=False, comment='Name of the construction site'),
    sa.Column('description', sa.String(length=255), nullable=False, comment='Description of the construction site'),
    sa.Column('address', sa.String(length=50), nullable=False, comment='Address of the construction site'),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_constructionsites_id'), 'constructionsites', ['id'], unique=True)
    op.create_table('lots',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=50), nullable=False, comment='Title of the lot'),
    sa.Column('description', sa.String(length=255), nullable=False, comment='Description of the lot'),
    sa.Column('fromTime', sa.DateTime(), nullable=False, comment='From time of the lot'),
    sa.Column('toTime', sa.DateTime(), nullable=False, comment='To time of the lot'),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('products',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False, comment='Name of the product'),
    sa.Column('description', sa.String(length=255), nullable=False, comment='Description of the product'),
    sa.Column('address', sa.String(length=50), nullable=False, comment='Address of the product'),
    sa.Column('price', sa.Float(), nullable=False, comment='Price of the product'),
    sa.Column('isnegotiable', sa.Boolean(), nullable=False, comment='Whether the product is negotiable'),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('address', sa.String(length=20), nullable=False, comment='Address of the project'),
    sa.Column('description', sa.String(length=255), nullable=False, comment='Description of the project'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('responses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='When user account was created'),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('lot_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['lot_id'], ['lots.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_responses_id'), 'responses', ['id'], unique=False)
    op.create_table('reviews',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('review_text', sa.String(), nullable=False, comment='Review text'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='When user account was created'),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reviews_id'), 'reviews', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_reviews_id'), table_name='reviews')
    op.drop_table('reviews')
    op.drop_index(op.f('ix_responses_id'), table_name='responses')
    op.drop_table('responses')
    op.drop_table('projects')
    op.drop_table('products')
    op.drop_table('lots')
    op.drop_index(op.f('ix_constructionsites_id'), table_name='constructionsites')
    op.drop_table('constructionsites')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_bin'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')
    # ### end Alembic commands ###
